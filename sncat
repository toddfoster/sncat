#!/usr/bin/env python

# sncat: simplenote cat
# Todd Foster, begun 21 April 2012
#
# Gets email, password from ~/.sncatrc with one per line: email = my_email@suremail.info
#
#
# Starting point: http://www.leancrew.com/all-this/2010/01/exploring-the-simplenote-api/
#   I completely relied on this to get what I wanted out of simplenote
# Similar idea to what I'm thinking, but in perl: http://ping13.net/hacks/snwatch/
# Another similar idea, also in perl: https://github.com/fletcher/SimplenoteSync
# Config parser lifted from: http://www.decalage.info/en/python/configparser
#

from urllib import urlopen
from base64 import b64encode
import json
import os
import sys
import pickle

COMMENT_CHAR = '#'
OPTION_CHAR =  '='
def parse_config(filename):
    options = {}
    f = open(os.path.expanduser(filename))
    for line in f:
        # First, remove comments:
        if COMMENT_CHAR in line:
            # split on comment char, keep only the part before
            line, comment = line.split(COMMENT_CHAR, 1)
        # Second, find lines with an option=value:
        if OPTION_CHAR in line:
            # split on option char:
            option, value = line.split(OPTION_CHAR, 1)
            # strip spaces:
            option = option.strip()
            value = value.strip()
            # store in dictionary:
            options[option] = value
    f.close()
    return options

options = parse_config('~/.sncatrc')

if options.has_key('destdir') and options.has_key('password'):
  print "Retrieving simplenote notes for " + options['email']
else:
  print "email or password not specified in .sncatrc: Quitting."
  sys.exit()

if options.has_key('destdir'):
  print "Specified destdir = " + options['destdir']
else:
  print "destdir not specified in .sncatrc: Quitting."
  sys.exit()

if options.has_key('pickleFile'):
  pickleFile = options['pickleFile']

destdir = os.path.expanduser(options['destdir'])

# Get my authorization token for later calls.
loginURL = 'https://simple-note.appspot.com/api/login'
creds = b64encode('email=%s&password=%s' % (options['email'], options['password']))
login = urlopen(loginURL, creds)
token = login.readline().rstrip()
login.close()

# Get the current note index.
indexURL = 'https://simple-note.appspot.com/api/index?auth=%s&email=%s' % (token, options['email'])
index = urlopen(indexURL)
newNoteList = json.load(index)

# Get the previous note index
oldNoteList = []
pickleFile = destdir + '/.notelist.pkl'
if os.path.isfile(pickleFile):
  input = open(pickleFile,'rb')
  oldNoteList = pickle.load(input)
  input.close()

# Get change list
changedNotes = []
for newNote in newNoteList:
  # Not going to pull down deleted notes
  if newNote['deleted'] == True:
    continue
  if len(oldNoteList) == 0:
    # Put all non-deleted notes in new list
    changedNotes.append(newNote)
  else:
    # Test timestamp
    for oldNote in oldNoteList:
      if oldNote['key'] == newNote['key']:
        if oldNote['modify'] < newNote['modify']:
          changedNotes.append(newNote)
        break


# Retrieved changed notes
baseURL = 'https://simple-note.appspot.com/api/note?key=%s&auth=%s&email=%s'
for i in changedNotes:
  noteURL = baseURL % (i['key'], token, options['email'])
  note = urlopen(noteURL).read().decode('utf-8').rstrip()
  encoded = '\n'.join(note.split('\n')[1:]).encode('utf-8')
  title = note.split('\n')[0].rstrip()
  print 'Downloading Title:    %s Modified: %s'  % (title, i['modify'])
  target = open (destdir + '/' + title, 'w')
  print>>target, encoded
  target.close()

# TODO: Delete deleted notes
# Caution: notes with same names but different keys might be erroneously deleted! Think on this.

# Save new notelist
output = open(pickleFile, 'wb')
pickle.dump(newNoteList, output)
output.close()
